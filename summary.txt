VCS - version control system: 
	It keeps track the changes with we make to our files.
	It also tracks the information about how made the changes, when, what changes did they make.
	We can also easily revert the changes to some point back.
	Also good for collaborative tasks.
	It basically a file managing system, which not only stores the latest files but also the earlier ones.

	Although we can track any format files by VCS like txt, jpg, videos, but it wouldn't be easier for checking difference between two files in many formats like vides, jpg. So txt files are great to track using the VCS. 
	There are many popular VCS available, like Subversion, mercurian but the most popular is Git.


GIT
	
git config --global user.email "me@example.com"  # for setting the user email address, --global for setting this email for all repositories, we can choose --local for setting to single repositories.
git config --global user.name "My name"    # for setting user name.
git config --list    # to get information about repository

git init   # for initialisating the git directory.

working tree - the area outside the git directory is our working tree, git directory holds the information about the history of our files, where as working tree only contains the current version of files.

Staging Area - A file maintained by the Git	that contains all the information about what files and changes are going to go into your next commit.

git add file_name   # to add file into staging area.
git add *       # for add all files to the staging area.
git status   # to view our working tree, pending changes and modification
git commit  # command to commit our changes to git directory.
git commit -m "your message"    # for useful way to use git commit, message can't be empty.

Git works in tree parts
	working tree - current version of our files
	Staging Area - files that are going to commit in our next commit
	Git directory - stores the history of all commits that we have made till now.

	NOTE: DO NOT MAKE MULTIPLE GIT DIRECTORY IN SINGLE REPOSITORY, MAKE ONLY ONE GIT DIRECTORY FOR SINGLE REPO.


COMMIT MESSAGES:
	generally Companies have their own set of instruction for how to write the commit messages, but if not, there are some general ways to write a good commit message.
	1. A short description of the change (up to 50 characters), followed by one or more paragraphs giving more details of the change (if needed). We can include the links also in description for better commit messages.

git log   # for showing the history of commits.



------------------------------WEEK 2 ---------------------------------

Skipping the staging Area:
	1. we can use the git commit -a -m "commit message" for skipping the staging area and directly commit the changes for tracked files. it doesn't include the changes in untracked fils.
	2. -a flag do not include untracked files, for untracked files first we need to track them by git add , then we can use the git commit -a -m "message" for commit the changes.
	3. while writing the git commit -m "short message"  # we can only write the short message by using this command, for better long commit messages we have to use git commit, and then write complete message in editor itself.

	HEAD - is basically a pointer to currently checkout snapshot.


git log -p   # -p flag for showing the commits with all changes (like line by line, showing what are the newly lines added, deleted etc) you have made in that commit.
git log -2 # for showing only last 2 commits.

git show commit_id   # for showing the specific commit 

git log --stat    # showing the commits with informations like which files were changed, how many lines were added, deleted.

git diff    # for showing the changes we have made in unstaged files.
git diff file_name   # for specifically showing the changes for given file.

git diff --staged   # for showing the changes in the files in our staging area

git diff --staged file_name    #  for specifically showing the changes for given file which is in the staging area.

git add -p    # for staging the files, with showing the what changes we have made in the files. 

git rm file_name   # for deleting the specific file, we no longer need. Don't forget to commit these changes and add message also

git mv old_file_name new_file_name   # for renaming the file, followed by git commit 


.gitignore  # this files contains the files that we don't to track by git.
	1. add the file name with extension which we don't want to track.
	2. use *.extension for untracking all the files with given .extension.

UNDOING CHANGES:
	There is confusion between checkout, restore, reset, etc, view this later.
	1. git restore file_name   or git checkout file_name # it works on working directory, it will change the file as it was in latest commit.   
	2. git restore --staged file_name   or git reset HEAD file_name  # to unstage our changes.
 
 	3. git commit --amend   # to overwrite the previous commit, suppose you want to commit to two file changes but by mistake you only commit one file, so for this situation we can overwrite the previous commit by using this command, whatEver will be in my staging area will get commit by this command. You should avoid this command when working with a public or shared Repo, because it may cause some confusion for other contributors.

 ROLLBACKS: How to revert the changes, that we have already commited

 	Commit_ID basically generated by the date, author_name, data and various parameter passed into a hash Function (SHA 1) which in return give a 40 character long string which we called as commit_id.


 	1. git revert HEAD      # This will inverse all the changes that were done in last commit, and create another commit. We can see both the commits in our git log command.
 	2. git revert commit_ID    # this will inverse the changes that you had made in commit with given commit_ID.  (There can be merging issue, if files to change is commited several times after the given commit_ID)


 BRANCHES AND MERGING:
 	BRANCHES -  A pointer to a particular commit. The default branch that git creates for you when you intialized a git repository is called the MASTER or MAIN branch. Branches are super useful to experiment with new features without affecting the current working state of our project. After successful experiment we can merge the branches with master to deploy our changes in master branch.

 	1. creating new Branche is just like taking a snapshot.
 	2. git branch    # to list all the branches. * shows the current branch we are on right now. 
 	3. git branch branch_name   # for creating the new branch.
 	4. git checkout branch_name     # to go to the given branch_name
 	5. git checkout -b branch_name    # for creating a new branch and switching it to.